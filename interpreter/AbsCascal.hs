

module AbsCascal where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Pr [Instr]
  deriving (Eq, Ord, Show, Read)

data Instr = RegularI Stm | ProcDefI ProcDef
  deriving (Eq, Ord, Show, Read)

data Stm
    = ExprS Exp
    | DeclS Decl
    | AssignS Assign
    | IfS If
    | LoopS Loop
    | PrCallS PrCall
    | PrintS PrintVal
  deriving (Eq, Ord, Show, Read)

data TypeSpecifier = TInt | TBool | TString
  deriving (Eq, Ord, Show, Read)

data Exp
    = EOr Exp Exp
    | EAnd Exp Exp
    | EEqual Exp Exp
    | ENotEqual Exp Exp
    | ELess Exp Exp
    | EGreater Exp Exp
    | ELessOrEqual Exp Exp
    | EGreaterOrEqual Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EVar Ident
    | EInt Integer
    | EString String
    | EBool BoolConst
    | ECast Cast
  deriving (Eq, Ord, Show, Read)

data BoolConst = BoolTrue | BoolFalse
  deriving (Eq, Ord, Show, Read)

data Decl = VarDecl TypeSpecifier Ident Exp
  deriving (Eq, Ord, Show, Read)

data Assign = VarAssign Ident Exp
  deriving (Eq, Ord, Show, Read)

data If = IfWithoutElse Exp [Stm] | IfWithElse Exp [Stm] [Stm]
  deriving (Eq, Ord, Show, Read)

data Loop
    = WhileLoop Exp [Stm] | ForLoop ForAssign ForAction Exp [Stm]
  deriving (Eq, Ord, Show, Read)

data ForAssign = ForAssignExp Ident Exp
  deriving (Eq, Ord, Show, Read)

data ForAction = ForActionTo | ForActionDownto
  deriving (Eq, Ord, Show, Read)

data ProcDef = PrDef Ident ArgsDef [Stm]
  deriving (Eq, Ord, Show, Read)

data ArgsDef
    = NoArgsDef
    | SingleArgDef TypeSpecifier Ident
    | MultipleArgsDef ArgsDef TypeSpecifier Ident
  deriving (Eq, Ord, Show, Read)

data PrCall = ProcCall Ident ArgsCall
  deriving (Eq, Ord, Show, Read)

data ArgsCall
    = ProcNoArgsCall
    | ProcSingleArgCall Exp
    | ProcMultipleArgsCall ArgsCall Exp
  deriving (Eq, Ord, Show, Read)

data Cast = IntToString Exp | StringToInt Exp
  deriving (Eq, Ord, Show, Read)

data PrintVal = PrintInstr Exp
  deriving (Eq, Ord, Show, Read)

