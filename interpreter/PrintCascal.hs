{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintCascal where

-- pretty-printer generated by the BNF converter

import AbsCascal
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print Program where
  prt i e = case e of
    Pr instrs -> prPrec i 0 (concatD [prt 0 instrs])

instance Print Instr where
  prt i e = case e of
    RegularI stm -> prPrec i 0 (concatD [prt 0 stm])
    ProcDefI procdef -> prPrec i 0 (concatD [prt 0 procdef])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Stm where
  prt i e = case e of
    ExprS exp -> prPrec i 0 (concatD [prt 0 exp])
    DeclS decl -> prPrec i 0 (concatD [prt 0 decl])
    AssignS assign -> prPrec i 0 (concatD [prt 0 assign])
    IfS if_ -> prPrec i 0 (concatD [prt 0 if_])
    LoopS loop -> prPrec i 0 (concatD [prt 0 loop])
    PrCallS prcall -> prPrec i 0 (concatD [prt 0 prcall])
    PrintS printval -> prPrec i 0 (concatD [prt 0 printval])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print TypeSpecifier where
  prt i e = case e of
    TInt -> prPrec i 0 (concatD [doc (showString "int")])
    TBool -> prPrec i 0 (concatD [doc (showString "bool")])
    TString -> prPrec i 0 (concatD [doc (showString "string")])

instance Print Exp where
  prt i e = case e of
    EOr exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "||"), prt 1 exp2])
    EAnd exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "&&"), prt 2 exp2])
    EEqual exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "=="), prt 3 exp2])
    ENotEqual exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "!="), prt 3 exp2])
    ELess exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "<"), prt 4 exp2])
    EGreater exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString ">"), prt 4 exp2])
    ELessOrEqual exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "<="), prt 4 exp2])
    EGreaterOrEqual exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString ">="), prt 4 exp2])
    EAdd exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "+"), prt 6 exp2])
    ESub exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "-"), prt 6 exp2])
    EMul exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "*"), prt 7 exp2])
    EDiv exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "/"), prt 7 exp2])
    EVar id -> prPrec i 7 (concatD [prt 0 id])
    EInt n -> prPrec i 7 (concatD [prt 0 n])
    EString str -> prPrec i 7 (concatD [prt 0 str])
    EBool boolconst -> prPrec i 7 (concatD [prt 0 boolconst])
    ECast cast -> prPrec i 7 (concatD [prt 0 cast])

instance Print BoolConst where
  prt i e = case e of
    BoolTrue -> prPrec i 0 (concatD [doc (showString "true")])
    BoolFalse -> prPrec i 0 (concatD [doc (showString "false")])

instance Print Decl where
  prt i e = case e of
    VarDecl typespecifier id exp -> prPrec i 0 (concatD [prt 0 typespecifier, prt 0 id, doc (showString ":="), prt 0 exp])

instance Print Assign where
  prt i e = case e of
    VarAssign id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 exp])

instance Print If where
  prt i e = case e of
    IfWithoutElse exp stms -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp, doc (showString "then"), prt 0 stms, doc (showString "endif")])
    IfWithElse exp stms1 stms2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp, doc (showString "then"), prt 0 stms1, doc (showString "else"), prt 0 stms2, doc (showString "endif")])

instance Print Loop where
  prt i e = case e of
    WhileLoop exp stms -> prPrec i 0 (concatD [doc (showString "while"), prt 0 exp, doc (showString "do"), prt 0 stms, doc (showString "endwhile")])
    ForLoop forassign foraction exp stms -> prPrec i 0 (concatD [doc (showString "for"), prt 0 forassign, prt 0 foraction, prt 0 exp, doc (showString "do"), prt 0 stms, doc (showString "endfor")])

instance Print ForAssign where
  prt i e = case e of
    ForAssignExp id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString ":="), prt 0 exp])

instance Print ForAction where
  prt i e = case e of
    ForActionTo -> prPrec i 0 (concatD [doc (showString "to")])
    ForActionDownto -> prPrec i 0 (concatD [doc (showString "downto")])

instance Print ProcDef where
  prt i e = case e of
    PrDef id argsdef stms -> prPrec i 0 (concatD [doc (showString "proc"), prt 0 id, doc (showString "("), prt 0 argsdef, doc (showString ")"), doc (showString "do"), prt 0 stms, doc (showString "endproc")])

instance Print ArgsDef where
  prt i e = case e of
    NoArgsDef -> prPrec i 0 (concatD [])
    SingleArgDef typespecifier id -> prPrec i 0 (concatD [prt 0 typespecifier, prt 0 id])
    MultipleArgsDef argsdef typespecifier id -> prPrec i 0 (concatD [prt 0 argsdef, doc (showString ","), prt 0 typespecifier, prt 0 id])

instance Print PrCall where
  prt i e = case e of
    ProcCall id argscall -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 argscall, doc (showString ")")])

instance Print ArgsCall where
  prt i e = case e of
    ProcNoArgsCall -> prPrec i 0 (concatD [])
    ProcSingleArgCall exp -> prPrec i 0 (concatD [prt 0 exp])
    ProcMultipleArgsCall argscall exp -> prPrec i 0 (concatD [prt 0 argscall, doc (showString ","), prt 0 exp])

instance Print Cast where
  prt i e = case e of
    IntToString exp -> prPrec i 0 (concatD [doc (showString "intToString"), doc (showString "("), prt 0 exp, doc (showString ")")])
    StringToInt exp -> prPrec i 0 (concatD [doc (showString "stringToInt"), doc (showString "("), prt 0 exp, doc (showString ")")])

instance Print PrintVal where
  prt i e = case e of
    PrintInstr exp -> prPrec i 0 (concatD [doc (showString "print"), doc (showString "("), prt 0 exp, doc (showString ")")])


