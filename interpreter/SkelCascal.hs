module SkelCascal where

-- Haskell module generated by the BNF converter

import AbsCascal
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Pr instrs -> failure x
transInstr :: Instr -> Result
transInstr x = case x of
  RegularI stm -> failure x
  ProcDefI procdef -> failure x
transStm :: Stm -> Result
transStm x = case x of
  ExprS exp -> failure x
  DeclS decl -> failure x
  AssignS assign -> failure x
  IfS if_ -> failure x
  LoopS loop -> failure x
  PrCallS prcall -> failure x
  PrintS printval -> failure x
transTypeSpecifier :: TypeSpecifier -> Result
transTypeSpecifier x = case x of
  TInt -> failure x
  TBool -> failure x
  TString -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EOr exp1 exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  EEqual exp1 exp2 -> failure x
  ENotEqual exp1 exp2 -> failure x
  ELess exp1 exp2 -> failure x
  EGreater exp1 exp2 -> failure x
  ELessOrEqual exp1 exp2 -> failure x
  EGreaterOrEqual exp1 exp2 -> failure x
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EVar ident -> failure x
  EInt integer -> failure x
  EString string -> failure x
  EBool boolconst -> failure x
  ECast cast -> failure x
transBoolConst :: BoolConst -> Result
transBoolConst x = case x of
  BoolTrue -> failure x
  BoolFalse -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  VarDecl typespecifier ident exp -> failure x
transAssign :: Assign -> Result
transAssign x = case x of
  VarAssign ident exp -> failure x
transIf :: If -> Result
transIf x = case x of
  IfWithoutElse exp stms -> failure x
  IfWithElse exp stms1 stms2 -> failure x
transLoop :: Loop -> Result
transLoop x = case x of
  WhileLoop exp stms -> failure x
  ForLoop forassign foraction exp stms -> failure x
transForAssign :: ForAssign -> Result
transForAssign x = case x of
  ForAssignExp ident exp -> failure x
transForAction :: ForAction -> Result
transForAction x = case x of
  ForActionTo -> failure x
  ForActionDownto -> failure x
transProcDef :: ProcDef -> Result
transProcDef x = case x of
  PrDef ident argsdef stms -> failure x
transArgsDef :: ArgsDef -> Result
transArgsDef x = case x of
  NoArgsDef -> failure x
  SingleArgDef typespecifier ident -> failure x
  MultipleArgsDef argsdef typespecifier ident -> failure x
transPrCall :: PrCall -> Result
transPrCall x = case x of
  ProcCall ident argscall -> failure x
transArgsCall :: ArgsCall -> Result
transArgsCall x = case x of
  ProcNoArgsCall -> failure x
  ProcSingleArgCall exp -> failure x
  ProcMultipleArgsCall argscall exp -> failure x
transCast :: Cast -> Result
transCast x = case x of
  IntToString exp -> failure x
  StringToInt exp -> failure x
transPrintVal :: PrintVal -> Result
transPrintVal x = case x of
  PrintInstr exp -> failure x

